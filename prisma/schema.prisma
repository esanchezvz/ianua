generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  date_of_birth DateTime?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  gender        Gender?
  image         String?
  name          String?
  role          Role      @default(USER)
  surname_1     String?
  surname_2     String?
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  broker   Broker?

  @@map(name: "users")
}

model Broker {
  id       String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique @map("user")
  listings Listing[]
}

model Listing {
  id                             String                   @id @default(cuid())
  access_roads                   String[]
  address                        Json
  age                            Int?
  ammenities                     ListingAmmenities[]
  bathrooms                      Float
  climate                        ListingClimate
  condition                      Int // 1 to 5 scale
  construction_style             String?
  createdAt                      DateTime                 @default(now()) @map(name: "created_at")
  data                           Json?
  description                    String                   @db.VarChar(1000)
  development_buildings          Int?
  development_name               String?
  development_stories            Int?
  event_policy_strictness        Int // 1 to 5 scale 
  featured                       Boolean?                 @default(false)
  floor                          Int?
  furnished                      Boolean
  interior_bathroom_furniture    String?
  interior_ceiling_lignts        String?
  interior_electric_instalations String?
  interior_floors                String?
  interior_walls                 String?
  last_renovation                DateTime?
  location_references            String?
  map                            String                   @db.VarChar(2500)
  main_feature                   String?
  maintenance_cost               Int?
  name                           String
  natural_lighting               Int // 1 to 5 scale
  nearby_social_areas            String[]
  orientation                    String?
  outside_finishes               String?
  parking_spots                  Int
  pet_firendly                   Boolean
  price                          Int
  private_services               ListingPrivateServices[]
  property_type                  PropertyType
  public_services                ListingPublicServices[]
  rooms                          Int
  security                       String?
  sq_m                           Int
  sq_m_extra                     Int? // m2 for private rooftop, backyard, balcony, etc.
  sq_m_total                     Int
  status                         ListingStatus
  storage                        Boolean?
  stories                        Int?
  style                          String?
  type                           ListingType
  updatedAt                      DateTime                 @updatedAt @map(name: "updated_at")
  urban_equipment                String[]
  views                          String
  yearly_tax                     Int? // This is the "predio" tax in Mexico

  broker   Broker @relation(fields: [borkerId], references: [id], onDelete: Cascade)
  borkerId String @unique @map("broker")

  @@map("listings")
}

// Enums

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ListingAmmenities {
  EVENTS_ROOM
  GYM
  LIBRARY
  SPA
}

enum ListingClimate {
  COLD
  WARM
}

enum ListingPrivateServices {
  BANK
  DAYCARE
  FARMACY
  HOSPITAL
  SCHOOL
  SUPERMARKET
  UNEVERSITY
  VETERINARY
}

enum ListingPublicServices {
  DAYCARE
  HOSPITAL
  MARKET
  SCHOOL
  TRANSPORT
  UNEVERSITY
}

enum ListingStatus {
  DELETED
  PENDING
  PUBLISHED
  UNAVAILABLE
}

enum PropertyType {
  APPARTMENT
  HOUSE
}

enum ListingType {
  FOR_RENT
  FOR_SALE
}

enum Role {
  ADMIN
  BROKER
  SUPER_ADMIN
  USER
}
