generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_DIRECT_URL")
}

// Models
model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  data          Json?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  name          String?
  role          Role      @default(USER)
  surname_1     String?
  surname_2     String?
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  accounts Account[]
  broker   Broker?
  profile  Profile?
  sessions Session[]

  @@map(name: "users")
}

model Profile {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: SetDefault)
  userId        String   @unique @map("user")
  gender        Gender
  gender_other  String?
  date_of_birth DateTime
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  @@map("profiles")
}

model Broker {
  id       String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique @map("user")
  listings Listing[]

  @@map("brokers")
}

model Listing {
  id                      String                    @id @default(cuid())
  address                 Json
  ammenities              ListingAmmenities[]
  climate                 ListingClimate
  condition               ListingCondition
  construction_style      ListingConstructionStyle?
  construction_year       Int?
  createdAt               DateTime                  @default(now()) @map(name: "created_at")
  data                    Json?
  description             String                    @db.VarChar(10000)
  development_buildings   Int?
  development_name        String?
  development_stories     Int?
  development_units       Int?
  dimension_depth         Int?
  dimension_front         Int?
  event_policy_strictness Int // 1 to 5 scale 
  featured                Boolean?                  @default(false)
  floor                   Int?
  full_bathrooms          Int?
  furnished               Boolean
  half_bathrooms          Int?
  legal_status            ListingLegalStatus?
  name                    String
  maintenance_cost        Int?
  map                     String?                   @db.VarChar(2500)
  natural_lighting        Int // 1 to 5 scale
  orientation             String?
  parking_spots           Int
  parking_spots_style     ListingParkingSpotStyle[]
  pet_friendly            Boolean
  price                   Int
  price_currency          ListingPriceCurrency?
  private_services        ListingPrivateServices[]
  property_type           PropertyType[]
  public_services         ListingPublicServices[]
  rooms                   Int
  service_rooms           Int?
  sq_m_balcony            Int?
  sq_m_construction       Int?
  sq_m_garden             Int?
  sq_m_living             Int?
  sq_m_terrace            Int?
  sq_m_total              Int?
  status                  ListingStatus
  storage_units           Int?
  stories                 Int?
  type                    ListingType
  updatedAt               DateTime                  @updatedAt @map(name: "updated_at")
  urban_equipment         String[]
  views                   ListingViews?
  yearly_tax              Int? // This is the "predio" tax in Mexico

  broker   Broker @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  brokerId String @map("broker")

  @@map("listings")
}

// Enums

enum Gender {
  MALE
  FEMALE
  RATHER_NOT_SAY
  OTHER
}

enum ListingAmmenities {
  BASKETBALL_COURT
  BUSINESS_CENTER
  CO_WORKING
  ELEVATOR
  EVENTS_ROOM
  FOOTBALL_FIELD
  GYM
  JACUZZI
  LIBRARY
  MOVIE_THEATER
  PADEL_COURT
  PET_DAYCARE
  PLAY_ROOM
  POOL
  ROOFGARDEN
  RUNNING_TRACK
  SAUNA
  SECURITY
  SPA
  TENNIS_COURT
  GAME_ROOM
  GARDEN
  STUDIO
  BAR
}

enum ListingClimate {
  COLD
  WARM
  HOT
}

enum ListingPrivateServices {
  BANK
  DAYCARE
  FARMACY
  HOSPITAL
  SCHOOL
  SUPERMARKET
  UNIVERSITY
  VETERINARY
}

enum ListingPublicServices {
  DAYCARE
  HOSPITAL
  MARKET
  SCHOOL
  TRANSPORT
  UNIVERSITY
}

enum ListingStatus {
  DELETED
  PENDING
  PUBLISHED
  UNAVAILABLE
  DRAFT
}

enum PropertyType {
  APPARTMENT
  HOUSE
  HOUSE_HORIZONTAL_CONDOMINIUM
  HOUSE_CLOSED_CONDOMINUIM
  CLOSED_STREET
}

enum ListingType {
  FOR_RENT
  FOR_SALE
}

enum Role {
  ADMIN
  BROKER
  SUPER_ADMIN
  USER
}

enum ListingParkingSpotStyle {
  LINEAL
  INDEPENDENT
  OUTDOOR
  WITH_ROOF
}

enum ListingCondition {
  NEW
  EXCELENT
  GOOD
  REGULAR
  NEEDS_WORK
  BAD
}

enum ListingPriceCurrency {
  MXN
  USD
}

enum ListingConstructionStyle {
  MEXICAN
  CLASSIC
  CONTEMPORARY
  INDUSTRIAL
}

enum ListingViews {
  OPEN
  CLOSED
}

enum ListingLegalStatus {
  SETTLED_MORTGAGE
  UNSETTLED_MORTGAGE
  IN_LITIGATION
  ASSESMENT_OR_LITIGATION_FREE
}
